#ifndef RSI_H
#define RSI_H

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <sstream>
#include <string>
#include <deque>
#include <algorithm>
#include <functional>
#include <numeric>
#include "GameState.h"   
#include <stdexcept>
#include <utility>

using namespace std;


bool check_Lemma_R2();
bool check_Lemma_R3();
bool check_Lemma_R4();
bool check_Lemma_R6();

// checks all the RSI related Lemmas we want to do using computers. 
// returns true iff the relevant Lemmas are verified.
// TODO: add SI Lemmas for surplus 8 and maybe some R Lemmas
bool check_all_RSI_Lemmas_sur7();

// checks all the RSI related Lemmas we want to do using computers. 
// returns true iff the relevant Lemmas are verified.
// TODO: add SI Lemmas for surplus 8 and maybe some R Lemmas
bool check_all_RSI_Lemmas_sur8();

// returns true iff every graph generated by the nauty command cmd
// either has more than sur vertices of degree less than 3 or Dominator 
// wins on the graph with firstPlayer starting the game.
bool check_SI(string cmd, char firstPlayer, int sur);

// returns a list of all the graphs generated by the nauty command cmd,
// for which cursur is at most sur and on which Dominator loses 
// where firstPlayer starts the game. Here cursur is sum_{v != w} |deg(v)-3|,
// where w has maximum degree and the sum ranges over all vertices of 
// the graph except for w. 
list<string> check_R(string cmd, char firstPlayer, int sur);


#endif // RSI_H