#!/bin/bash 

k=$(nproc)
[ "$k" -gt 1 ] && k=$((k - 1))
log_dir="logs"
tmp_dir="tmp"

mkdir -p "$log_dir" "$tmp_dir"

################################################################################
# Small graphs #################################################################
################################################################################
g++ game_state.cpp graph.cpp check_graphs.cpp -o check_graphs


# Checks whether o_p(G) = D for every graph G generated by the nauty command 
# cmd. The results are temporarily stored in tmp_dir/dir_name and later 
# collected in ... 
run_graphs_job() {
    cmd=$1; p=$2; dir_name=$3
    cmd_name=$(echo "$cmd" | tr ' /' '__')
    mkdir -p "$tmp_dir/$dir_name"
    tmpfile="$tmp_dir/$dir_name/${cmd_name}_$(echo "$p").txt"

    {
        eval "$cmd" | ./check_graphs "$p"
    } &> "$tmpfile"
}

echo "=== Running checks for beta(1)"

run_graphs_job "geng -d1 4" "D" "beta(1)" &
run_graphs_job "geng -d1 5" "D" "beta(1)" &


# echo "=== Running checks for beta'(2)"

# run_graphs_job "geng -d2 4" "S" "beta'(2)" &
# run_graphs_job "geng -d2 5" "S" "beta'(2)" &
# run_graphs_job "geng -d2 6" "S" "beta'(2)" &

# echo "=== Running checks for beta(2)"

# run_graphs_job "geng -d2 8" "D" "beta(2)" &
# run_graphs_job "geng -d2 9" "D" "beta(2)" &
# run_graphs_job "geng -d2 10" "D" "beta(2)" &
# run_graphs_job "geng -d2 11" "D" "beta(2)" &


# echo "=== Running checks for beta'(3)"

# run_graphs_job "geng -d3 8" "S" "beta'(3)" &
# run_graphs_job "geng -d3 9" "S" "beta'(3)" &
# run_graphs_job "geng -d3 10" "S" "beta'(3)" &
# run_graphs_job "geng -d3 11" "S" "beta'(3)" &
# run_graphs_job "geng -d3 12" "S" "beta'(3)" &

while [ "$(jobs -rp | wc -l)" -ge "$k" ]; do
    sleep 0.2
done

################################################################################
# R-Lemmas #####################################################################
################################################################################
g++ game_state.cpp graph.cpp check_R.cpp -o check_R


# Checks whether o_p(G) = D for every graph G generated by the nauty command cmd 
# which have surplus at most sur. The results are temporarily stored in 
# tmp_dir/dir_name and later collected in ... 
run_R_job() {
    cmd=$1; p=$2; sur=$3; dir_name=$4
    cmd_name=$(echo "$cmd" | tr ' /' '__')
    mkdir -p "$tmp_dir/$dir_name"
    tmpfile="$tmp_dir/$dir_name/${cmd_name}_$(echo "$p")_$(echo "$sur").txt"

    {
        eval "$cmd" | ./check_R "$p" "$sur"
    } &> "$tmpfile"
}


echo "=== Running R-Lemma 2"

run_R_job "geng -d1 5" "S" "5" "R-Lemma_2" &
run_R_job "geng -d1 6" "S" "5" "R-Lemma_2" &


# echo "=== Running R-Lemma 3"

# run_R_job "geng -d1 4" "S" "2" "R-Lemma_3" &
# run_R_job "geng -d1 5" "S" "2" "R-Lemma_3" &
# run_R_job "geng -d1 6" "S" "2" "R-Lemma_3" &
# run_R_job "geng -d1 7" "S" "2" "R-Lemma_3" &


# echo "=== Running R-Lemma 4"

# run_R_job "geng -d1D3 9 11:11" "D" "5" "R-Lemma_4" &
# run_R_job "geng -d1D6 10 13:14" "D" "5" "R-Lemma_4" &
# run_R_job "geng -d1D8 11 14:17" "D" "5" "R-Lemma_4" &
# run_R_job "geng -d1D9 12 16:19" "D" "5" "R-Lemma_4" &


# echo "=== Running R-Lemma 6"

# run_R_job "geng -d2D9 13 17:20" "D" "5" "R-Lemma_6" &
# run_R_job "geng -d2D9 14 19:22" "D" "5" "R-Lemma_6" &



while [ "$(jobs -rp | wc -l)" -ge "$k" ]; do
    sleep 0.2
done

################################################################################
# SI-Lemmas ####################################################################
################################################################################
g++ game_state.cpp graph.cpp check_SI.cpp -o check_SI


# Checks whether o_p(G) = D for every graph G generated by the nauty command cmd
# which have at most sur degree 2 vertices. The results are temporarily stored 
# in tmp_dir/dir_name and later collected in ... 
run_SI_job() {
    cmd=$1; p=$2; sur=$3; dir_name=$4
    cmd_name=$(echo "$cmd" | tr ' /' '__')
    mkdir -p "$tmp_dir/$dir_name"
    tmpfile="$tmp_dir/$dir_name/${cmd_name}_$(echo "$p")_$(echo "$sur").txt"

    {
        eval "$cmd" | ./check_SI "$p" "$sur"
    } &> "$tmpfile"
}


echo "=== Running SI-Lemma 3"

run_SI_job "genbg -d2:3 -D7:3 6 7" "S" "6" "SI-Lemma_3" &
run_SI_job "genbg -d2:3 -D6:3 5 6" "S" "5" "SI-Lemma_3" &
run_SI_job "genbg -d2:3 -D5:3 4 5" "S" "4" "SI-Lemma_3" &
run_SI_job "genbg -d2:3 -D4:3 3 4" "S" "3" "SI-Lemma_3" &


# echo "=== Running SI-Lemma 4"

# run_SI_job "genbg -d2:2 -D9:3 7 9 26:26" "D" "4" "SI-Lemma_4" &
# run_SI_job "genbg -d2:2 -D8:3 6 8 23:23" "D" "4" "SI-Lemma_4" &
# run_SI_job "genbg -d2:2 -D7:3 5 7 20:20" "D" "4" "SI-Lemma_4" &
# run_SI_job "genbg -d2:2 -D6:3 4 6 17:17" "D" "4" "SI-Lemma_4" &
# run_SI_job "genbg -d2:2 -D5:3 3 5 14:14" "D" "4" "SI-Lemma_4" &


# echo "=== Running SI-Lemma 5"

# run_SI_job "genbg -d2:3 -D8:3 7 8" "D" "7" "SI-Lemma_5" &
# run_SI_job "genbg -d2:3 -D9:3 8 9" "D" "8" "SI-Lemma_5" &


# echo "=== Running SI-Lemma 6"

# run_SI_job "genbg -d2:3 -D4:3 9 10" "D" "5" "SI-Lemma_6" &


# echo "=== Running SI-Lemma 7"

# run_SI_job "genbg -d2:3 -D7:3 5 7" "S" "2" "SI-Lemma_7" &
# run_SI_job "genbg -d2:3 -D6:3 4 6" "S" "2" "SI-Lemma_7" &
# run_SI_job "genbg -d2:3 -D5:3 3 5" "S" "2" "SI-Lemma_7" &


# echo "=== Running SI-Lemma 8"

# run_SI_job "genbg -d2:3 -D9:3 7 9" "D" "2" "SI-Lemma_9" &
# run_SI_job "genbg -d2:3 -D8:3 6 8" "D" "2" "SI-Lemma_9" &

while [ "$(jobs -rp | wc -l)" -ge "$k" ]; do
    sleep 0.2
done

################################################################################
# Cores ########################################################################
################################################################################

# Generating the degree sequences 
g++ sequence_generator.cpp -o sequence_generator
echo "=== Generating degree sequences" 
./sequence_generator &


g++ pccgs.cpp graph.cpp check_cores.cpp -o check_cores

# Array containing the nauty commands generating all cores
cores_cmd_arr=()
while read line; do
    cores_cmd_arr+=("$line")
done < cores_cmds.txt


n=150

# Checks whether Dominator wins on every completion of every core generated by 
# the nauty command "cmd i/n". The results are temporarily stored in 
# tmp_dir/cmd_name and later collected in ...
run_cores_job() {
    local cmd=$1; local ind=$2
    cmd_name=$(echo "$cmd" | tr ' /' '__')
    mkdir -p "$tmp_dir/$cmd_name"
    tmpfile="$tmp_dir/$cmd_name/$(printf "%03d" "$2")_$n.txt"
    echo "$tmpfile"

    {
        eval "$cmd $2/$n" | ./check_cores
    } &> "$tmpfile"
}

# Runs over all cmd in cores_cmd_arr and over all i from 0 to n-1 and calls 
# run_cores_job for the pair (cmd, i).
for cmd in "${cores_cmd_arr[@]}"; do
    echo "=== Running: $cmd"
    cmd_name=$(echo "$cmd" | tr ' /' '__')
    for i in $(seq 0 $((n-1))); do
        run_cores_job "$cmd" "$i" &

        while [ "$(jobs -rp | wc -l)" -ge "$k" ]; do
            sleep 0.2
        done
    done
done

while [ "$(jobs -rp | wc -l)" -gt 0 ]; do
    sleep 0.2
done


# Collecting tmp files in log ##################################################

for dir in "$tmp_dir"/*/; do
    if [ ! -d "$dir" ]; then
        continue
    fi
    log_name=$(basename "${dir%/}")
    log_file="$log_dir/$log_name.log"
    echo "=== Log file for $log_name" >> "$log_file"
    echo -e "\n\n" >> "$log_file"
    for tmp_file in "$dir"*; do
        if [ ! -f "$tmp_file" ]; then
            continue
        fi
        cat "$tmp_file" >> "$log_file"
    done

    echo -e "\n\n" >> "$log_file"

    graph_nauty=$(awk '/^>Z/ {sum += $2} END {print sum}' "$log_file")
    graph_compl=$(awk '/^>F/ {sum += $2} END {print sum}' "$log_file")
    time_nauty=$(awk '/^>Z/ {print $(NF-1)}' "$log_file" | paste -sd+ - | bc)
    time_nauty=$(printf "%.2f" "$time_nauty")
    time_compl=$(awk '/^>F/ {print $(NF-1)}' "$log_file" | paste -sd+ - | bc)
    time_compl=$(printf "%.2f" "$time_compl")
    exc_graphs=$(grep -c '^Found graph' "$log_file")

    echo "=== Total number of graphs generated: $graph_nauty" >> "$log_file"
    echo "=== Total number of graphs checked: $graph_compl" >> "$log_file"
    echo "=== Total time for generation: $time_nauty seconds" >> "$log_file"
    echo "=== Total time for checking: $time_compl seconds" >> "$log_file"
    echo "=== Total number of exceptional graphs: $exc_graphs" >> "$log_file"
done

rm -rf "$tmp_dir"
echo "=== All checks completed. Logs are saved in the $log_dir directory."